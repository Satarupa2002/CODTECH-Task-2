#define ENABLE_DEBUG
#ifdef ENABLE_DEBUG
#define DEBUG_ESP_PORT Serial
#define NODEBUG_WEBSOCKETS
#define NDEBUG
#endif
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include "SinricPro.h"
#include "SinricProSwitch.h"
#include <DallasTemperature.h> 
#include <OneWire.h> 
#include <Wire.h>
#define WIFI_SSID "Satarupa"
#define WIFI_PASS "123456789"
#define APP_KEY "23ae926b-fbc2-45f3-853b-5285ca96a39f"
#define APP_SECRET "19e17451-d8d0-43c9-820e-7ee1b79394a5-35184dfb-9436-47bf-b242-78d26e6592e2"
#define TEMP_SENSOR_ID "6524dc6d23bcf22e9e0d24a0"
#define device_ID_2   "6524d743e7ca72e9eebda953"
#define device_ID_3   "6524d867e7ca72e9eebda9b1"
#define RelayPin1 5 // D1
#define RelayPin2 4 // D2
#define RelayPin3 14 // D5
#define SwitchPin1 10 // SD3
#define SwitchPin2 0 // D3
#define SwitchPin3 13 // D7
#define wifiLed 16 // D0
#define BAUD_RATE 9600
#define DEBOUNCE_TIME 250

typedef struct {
  int relayPIN;
  int flipSwitchPIN;
} 
deviceConfig_t;
std::map<String, deviceConfig_t> devices = {
    {TEMP_SENSOR_ID, {RelayPin1, SwitchPin1}},
    {device_ID_2, {  RelayPin2, SwitchPin2 }},
    {device_ID_3, {  RelayPin3, SwitchPin3 }},
};

typedef struct {
  String deviceId;
  bool lastFlipSwitchState;
  unsigned long lastFlipSwitchChange;
} 
flipSwitchConfig_t;
std::map<int, flipSwitchConfig_t> flipSwitches;
OneWire oneWire(SwitchPin1); // Initialize the OneWire instance for the flip switch

DallasTemperature sensors(&oneWire); // Initialize the DallasTemperature instance
float temperature;
float lastTemperature;
unsigned long lastEvent = (-DEBOUNCE_TIME);
void handleFlipSwitches() {
  unsigned long actualMillis = millis();
  for (auto &flipSwitch : flipSwitches) 
{
    unsigned long lastFlipSwitchChange = flipSwitch.second.lastFlipSwitchChange;

    if (actualMillis - lastFlipSwitchChange > DEBOUNCE_TIME)
 {
      int flipSwitchPIN = flipSwitch.first;
      bool lastFlipSwitchState = flipSwitch.second.lastFlipSwitchState;
      bool flipSwitchState = digitalRead(flipSwitchPIN);
      if (flipSwitchState != lastFlipSwitchState)
 {
        flipSwitch.second.lastFlipSwitchChange = actualMillis;
        String deviceId = flipSwitch.second.deviceId;
        int relayPIN = devices[deviceId].relayPIN;
        bool newRelayState = !digitalRead(relayPIN);
        digitalWrite(relayPIN, newRelayState);
        SinricProSwitch &mySwitch = SinricPro[deviceId];
        mySwitch.sendPowerStateEvent(!newRelayState);
        flipSwitch.second.lastFlipSwitchState = flipSwitchState;
      }
    }
  }
}
bool onPowerState(String deviceId, bool &state) {
  Serial.printf("%s: %s\r\n", deviceId.c_str(), state ? "on" : "off");
  int relayPIN = devices[deviceId].relayPIN;
  digitalWrite(relayPIN, !state);
  return true;
}
void setupWiFi() {
  Serial.printf("\r\n[Wifi]: Connecting");
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.printf(".");
    delay(250);
  }
  digitalWrite(wifiLed, LOW);
  Serial.printf("connected!\r\n[WiFi]: IP-Address is %s\r\n", WiFi.localIP().toString().c_str());
}
void setupSinricPro() {
  for (auto &device : devices) {
    const char *deviceId = device.first.c_str();
    SinricProSwitch &mySwitch = SinricPro[deviceId];
    mySwitch.onPowerState(onPowerState);
  }

  SinricPro.begin(APP_KEY, APP_SECRET);
  SinricPro.restoreDeviceStates(true);
}

void setupRelays() {
  for (auto &device : devices) {
    int relayPIN = device.second.relayPIN;
    pinMode(relayPIN, OUTPUT);
    digitalWrite(relayPIN, HIGH);
  }
}

void setupFlipSwitches() {
  for (auto &device : devices) {
    flipSwitchConfig_t flipSwitchConfig;
    flipSwitchConfig.deviceId = device.first;
    flipSwitchConfig.lastFlipSwitchChange = 0;
    flipSwitchConfig.lastFlipSwitchState = true;
    int flipSwitchPIN = device.second.flipSwitchPIN;
    flipSwitches[flipSwitchPIN] = flipSwitchConfig;
    pinMode(flipSwitchPIN, INPUT_PULLUP);
  }
}
void setupSensor() {
  sensors.begin();
}
void setup() {
  Serial.begin(BAUD_RATE);
  pinMode(wifiLed, OUTPUT);
  digitalWrite(wifiLed, HIGH);
  setupRelays();
  setupFlipSwitches();
  setupWiFi();
  setupSinricPro();
  setupSensor();
}
void loop() {
  SinricPro.handle();
  handleFlipSwitches();
}

